//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""GameMaker"",
            ""id"": ""ce618d60-28f5-4c26-a0f8-c184714a0834"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""04b81fba-6b57-4d70-a2ce-50c5d8aaa2fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""5163a7c7-18da-4b30-b9ae-8e48c27dca75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""f2906a7d-3e7c-44e9-9972-d2df9585010f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TabKey"",
                    ""type"": ""Value"",
                    ""id"": ""21929235-3db6-4236-92b2-30ec5aeae6c9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2bd9d79-dd56-46fb-82f5-8b8dadc413d8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b88c2ee3-681e-4a41-8e98-d303bdc0a464"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de3e04e-48fd-4a45-adae-fe5708035828"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4be8d814-fc2b-4dda-9183-0fcc64fa688f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TabKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMaker
        m_GameMaker = asset.FindActionMap("GameMaker", throwIfNotFound: true);
        m_GameMaker_MouseLeftClick = m_GameMaker.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_GameMaker_MouseRightClick = m_GameMaker.FindAction("MouseRightClick", throwIfNotFound: true);
        m_GameMaker_MousePosition = m_GameMaker.FindAction("MousePosition", throwIfNotFound: true);
        m_GameMaker_TabKey = m_GameMaker.FindAction("TabKey", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMaker
    private readonly InputActionMap m_GameMaker;
    private List<IGameMakerActions> m_GameMakerActionsCallbackInterfaces = new List<IGameMakerActions>();
    private readonly InputAction m_GameMaker_MouseLeftClick;
    private readonly InputAction m_GameMaker_MouseRightClick;
    private readonly InputAction m_GameMaker_MousePosition;
    private readonly InputAction m_GameMaker_TabKey;
    public struct GameMakerActions
    {
        private @PlayerInput m_Wrapper;
        public GameMakerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_GameMaker_MouseLeftClick;
        public InputAction @MouseRightClick => m_Wrapper.m_GameMaker_MouseRightClick;
        public InputAction @MousePosition => m_Wrapper.m_GameMaker_MousePosition;
        public InputAction @TabKey => m_Wrapper.m_GameMaker_TabKey;
        public InputActionMap Get() { return m_Wrapper.m_GameMaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMakerActions set) { return set.Get(); }
        public void AddCallbacks(IGameMakerActions instance)
        {
            if (instance == null || m_Wrapper.m_GameMakerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameMakerActionsCallbackInterfaces.Add(instance);
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            @MouseRightClick.started += instance.OnMouseRightClick;
            @MouseRightClick.performed += instance.OnMouseRightClick;
            @MouseRightClick.canceled += instance.OnMouseRightClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @TabKey.started += instance.OnTabKey;
            @TabKey.performed += instance.OnTabKey;
            @TabKey.canceled += instance.OnTabKey;
        }

        private void UnregisterCallbacks(IGameMakerActions instance)
        {
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            @MouseRightClick.started -= instance.OnMouseRightClick;
            @MouseRightClick.performed -= instance.OnMouseRightClick;
            @MouseRightClick.canceled -= instance.OnMouseRightClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @TabKey.started -= instance.OnTabKey;
            @TabKey.performed -= instance.OnTabKey;
            @TabKey.canceled -= instance.OnTabKey;
        }

        public void RemoveCallbacks(IGameMakerActions instance)
        {
            if (m_Wrapper.m_GameMakerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameMakerActions instance)
        {
            foreach (var item in m_Wrapper.m_GameMakerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameMakerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameMakerActions @GameMaker => new GameMakerActions(this);
    public interface IGameMakerActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnTabKey(InputAction.CallbackContext context);
    }
}
